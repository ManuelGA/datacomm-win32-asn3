CLIENT
======

Client::pauseStream()
{
    ReaderThreadController.pauseStream()
}
Client::resumeStream()
{
    ReaderThreadController.resumeStream()
}
Client::stopStream()
{
    ReaderThreadController.stopStream()
}
Client::seekStream(percent)
{
    ReaderThreadController.seekStream(percent)
}

Client::startTransmission()
{
    TransmitThreadController.startTransmission()
}
Client::stopTransmission()
{
    TransmitThreadController.stopTransmission()
}
Client::setTransmissionGroup(groupId)
{
    TransmitThreadController.setTransmissionGroup(groupId)
}

Client::startDownload(songId)
{
    ControlThreadController.startDownload(songId)
}
Client::stopDownload(songId)
{
    ControlThreadController.stopDownload(songId)
}
Client::changeStream(songId)
{
    ControlThreadController.changeStream(songId)
}

PlaybackThreadController

ReceiveThreadController

TransmitThreadController

ControlThreadController

WriterThreadController
======================
WriterThreadController::startThread()
{
    reset alive event
    reset dead event
    reset stop event
    do writer routine on new thread
    wait until thread is alive
}
WriterThreadController::stopThread()
{
    set stop event
    wait until thread is dead
}
WriterThreadController::insertData()
{

}
WriterThreadController::purgeData()
{
    wait(WriterThreadControllerAccess)
    stopThread
    signal(WriterThreadControllerAccess)
}
WriterThread
{
    set alive event
    set dead event
}

ReaderThreadController
======================

ReaderThreadController::ReaderThreadController()
{
    wait(ReaderThreadControllerAccess)
    seek = 0
    signal(ReaderThreadControllerAccess)
}
ReaderThreadController::~ReaderThreadController
{
    wait(ReaderThreadControllerAccess)
    stopThread()
    signal(ReaderThreadControllerAccess)
}
ReaderThreadController::pauseStream()
{
    wait(ReaderThreadControllerAccess)
    stopThread()
    signal(ReaderThreadControllerAccess)
}
ReaderThreadController::resumeStream()
{
    wait(ReaderThreadControllerAccess)
    startThread()
    signal(ReaderThreadControllerAccess)
}
ReaderThreadController::stopStream()
{
    wait(ReaderThreadControllerAccess)
    seek = 0
    stopThread()
    signal(ReaderThreadControllerAccess)
}
ReaderThreadController::seekStream(time)
{
    wait(ReaderThreadControllerAccess)
    stopThread()
    seek = time
    startThread()
    signal(ReaderThreadControllerAccess)
}
ReaderThreadController::startThread()
{
    reset alive event
    reset dead event
    reset stop event
    do reader routine on new thread
    wait until thread is alive
}
ReaderThreadController::stopThread()
{
    set stop event
    wait until thread is dead
}

ReaderThread
{
    set alive event
    open file
    seek to position
    while(!stop)
    {
        data = read(file)
        update seek
        PlaybackThreadController.appendToPlaybackBuffer(data)
    }
    close file
    set dead event
}

SERVER
======

Server::startServer()
Server::stopServer()
Server::setServerPort(port)
Server::changeStream()
Server::onConnect()

Server::onUpload(songID)
Server::onDisconnect()
{
    for all UTCBs in the UTCBSet
    {
        UTCB.stop = true
    }

    wait for all of the UTCB.stopped events to become set
}

Server::STCB
{
    Event stop
    Event stopped
    MessageQueue msgQueue
    UTCBSet
}

Server::UTCB
{
    bool stop
    Event stopped
    int songID
}

Server::UploadThread
{
    reset UTCB.stopped
    figure out where the file is from the UTCB.songID
    open the file
    while(!UTCB.stop)
    {
        read file
        enqueue song packet to STCB.msgQueue
    }
    close the file
    set UTCB.stopped
}
